[["index.html", "DS809 Set 1 Course Info", " DS809 David Reynolds 2024-01-04 Set 1 Course Info "],["exploratory-analysis-of-time-series-data.html", "Set 2 Exploratory Analysis of Time Series Data 2.1 Time Series Data 2.2 Time Series EDA 2.3 Multiple Time Series 2.4 Autocorrelation 2.5 Lab 1", " Set 2 Exploratory Analysis of Time Series Data 2.1 Time Series Data A time series is an ordered sequence of observations, where the ordering is through time. Time series data creates unique problems for statistical modeling and inference. Traditional inference assumes that observations (data) are independent and identically distributed. Adjacent data points in time series data are not necessarily independent (uncorrelated). Most time series models aim to exploit such dependence. For instance, yesterday’s demand of a product may tell us something about today’s demand of a product. There are several different ways to represent time series data in R. We will use the tidyverse family of packages extensively in this class. This package includes the lubridate package, which includes functions to work with date-times. Two of the most common ways to represent time series data are using data frames in which one of the variables is a time object (such as POSIXct or Date) or using a time series object. These two representations are shown below with simulated trading data for a single 8-hour trading day. set.seed(1) # option 1: represent time series data within a data frame hr = seq(mdy_hm(&quot;12-11-2023 09:30&quot;), mdy_hm(&quot;12-11-2023 16:30&quot;), &#39;hour&#39;) # 8 hours pr = rnorm(8) # generate fake trading data trading_dat = data.frame(hr, pr) # option 2: represent time series data using a time series object trading_ts = ts(data = trading_dat$pr, start = 1, frequency = 8) 2.2 Time Series EDA The first thing to do in any data analysis is exploratory data analysis (EDA). Graphs enable many features of the data to be visualized, including patterns, unusual observations, changes over time, and relationships between variables. The features that are seen in plots of the data can then be incorporated into statistical models. R has several systems for making graphs. We will primarily use ggplot2, which is among the set of tidyverse packages and is one of the most versatile systems for plotting. We will use a data set from Kayak to motivate our analysis. conversions = read.csv(&quot;https://raw.githubusercontent.com/dbreynol/DS809/main/data/conversions.csv&quot;) knitr::kable(head(conversions)) datestamp country_code marketing_channel conversions 2014-11-01 be Display Ads 1174 2014-11-01 be KAYAK Deals Email 57 2014-11-01 be Search Engine Ads 1122 2014-11-01 be Search Engine Results 976 2014-11-01 fi Display Ads 12 2014-11-01 fi Search Engine Results 2 This dataset contains information on the total number of daily conversions by country and marketing channel. Let us focus our analysis on the US and fist visualize the number of conversions by day. This plot contains a lot of useful information. To gain insight into how conversions depend on marketing channel, we can use facets. Facets are subplots that display a time series for each marketing channel. Display ads and search engine ads are the dominant marketing channels. Both have a regular pattern that is likely a function of the day of week, with a higher number of conversions during weekdays as compared with weekends. We can explore this feature by aggregating over each weekday and visualizing how the distribution of conversions changes by day. Clearly, there are significant changes in the mean level of conversions across the week. This is a form of seasonality. It may be useful to see what the data look like when this weekday effect is removed. To do so, we could visualize the residuals from the following linear regression model: \\[\\begin{align} \\hat{\\text{conversions}} = \\hat{\\beta}_0 + \\sum_{j=2}^7 \\bigg( \\hat{\\beta}_j \\times 1(\\text{weekday = j}) \\bigg), \\end{align}\\] where \\(j\\) indexes the day of week. The residuals from this model consist of each observation minus the mean for that particular weekday. This allows us to more clearly see the trend across the date range, removing the effect of the weekly pattern. 2.3 Multiple Time Series Often we will want to develop insight into the relationship between several variables. To illustrate, we will use quarterly data on GDP per capita and the Case Shiller Home Price Index (both from the FRED database). It looks like these two time series track pretty closely to one another. We could fit a linear regression to this data in order to estimate the expected change in the Case Shiller Index for a unit ($1) change in GDP/ capital term estimate std.error statistic p.value (Intercept) -556.2290146 33.8244315 -16.44459 0 gdp 0.0126208 0.0005663 22.28669 0 Further, we could also examine the residuals to gain insight into what is missing from this model. The model severely underestimates the house index starting during the pandemic. There is a clear pattern to these residuals. Is this a problem? 2.4 Autocorrelation One of the assumptions of the linear regression model is that the errors are independent and identically distributed. That is, for the model, \\[\\begin{align} y = X \\beta + \\epsilon, \\end{align}\\] The error vector, \\(\\epsilon \\sim N(0, \\sigma^2)\\). This implies that there is no correlation structure to the residuals. One way to check that this is true is to check for the absence of correlation in the observed residuals. To review this concept, we’ll start with a definition for covariance. For two vectors of data, \\(x\\) and \\(y\\), the covariance between the two is, \\[\\begin{align} \\text{cov}(x,y) &amp;= \\frac{ \\sum_i (x_i - \\bar{x})(y_i - \\bar{y})}{n-1} \\end{align}\\] Correlation is a dimensionless measure of the linear association between two variables. It is defined as the covariance scaled by the standard deviations. That is, \\[\\begin{align} \\text{cor}(x,y) &amp;= \\frac{\\text{cov}(x,y)}{\\sigma_x \\sigma_y} \\\\ &amp;= \\frac{ \\sum_i (x_i - \\bar{x})(y_i - \\bar{y})}{ \\sqrt{ \\sum_i (x_i - \\bar{x})^2 \\sum_i (y_i - \\bar{y})^2 }} \\end{align}\\] Let’s compute this quantity on some simulated data. set.seed(1) n = 5 x = rnorm(n) y = rnorm(n) sum( (x - mean(x)) * (y - mean(y))) / ( (n-1) * sd(x) * sd(y) ) cor(x, y) For time series data, there is a closely related concept called autocorrelation. Given a time series, \\(y_t\\), where \\(t=1,\\ldots,T\\), autocorrelation is the correlation between \\(y_t\\) and its lagged value, \\(y_{t-k}\\). That is, autocorrelation is the correlation of a time series with a delayed copy of itself, as a function of delay. Just as correlation is a function of covariance, autocorrelation is a function of autocovariance. The The (sample) autocovariance, \\(\\hat{\\gamma}\\) for a time series \\(y\\) at lag \\(k\\) is: \\[\\begin{align} \\hat{\\gamma}_k &amp;= \\text{cov}(y_t, y_{t-k}) \\\\ &amp;= \\frac{1}{T-k-1} \\sum_{t = k + 1}^{T} (y_t - \\bar{y})(y_{t-k} - \\bar{y}) \\end{align}\\] The (sample) autocorrelation function for lag \\(k\\), \\(\\hat{\\rho}_k\\), is simply the lag \\(k\\) autocovariance, \\(\\hat{\\gamma_k}\\) , scaled by the standard deviations. \\[\\begin{align} \\hat{\\rho}_k &amp;= \\frac{ \\hat{\\gamma_k} }{\\sigma_{y_t} \\sigma_{y_{t-k}}} \\\\ &amp;= \\frac{ \\hat{\\gamma_k} }{\\hat{\\gamma_0}}. \\end{align}\\] The second line follows from the linear regression assumption of constant variance. Here is a simple example of computing the lag 1 autocorrelation. a = c(1,2,3,4,5) a1 = c(1,2,3,4) a2 = c(2,3,4,5) # lag 1 autocorrelation sum( (a1 - mean(a)) * (a2 - mean(a))) / (sum( (a - mean(a))^2 ) ) # by hand (acf(a)) 2.5 Lab 1 Starting from the code chunk in Time Series Data, extend the simulated training data to a full week (December 11 through December 15, eight hours each day). Using the data frame representation, plot(trading_dat$hr, trading_dat$pr). Using the time series data, plot(trading_ts). What are the differences between these two plots? We can further hone in on the trend of the residuals at the end of Time Series EDA by computing and plotting a moving average. For a time series \\(y_t\\), \\(t = 1, \\ldots, T\\), a moving average of order \\(m\\) can be written, \\[\\begin{align} \\hat{y_t} = \\frac{1}{m} \\sum_{j=-k}^{k} y_{t+j}, \\end{align}\\] where \\(m=2k+1\\). The concept behind this technique is that observations that are close in time are likely to be close in value. Compute a moving average of order \\(m=7\\) for the residual time series and plot it along with the residuals in a single plot. Join the Kayak visits data (see below) to the conversions data from Time Series EDA. Use the inner_join function with the argument, by = c(“datestamp”, “country_code”, “marketing_channel”). Make a plot of user_visits and conversions by day. Standardize them if it makes sense. Then, fit a linear regression model with conversions as the reponse variable and user_visits as the explanatory variable. What is the estimated line equation? Finally, make a plot of the residuals from this model. visits = read.csv(&quot;https://raw.githubusercontent.com/dbreynol/DS809/main/data/visits.csv&quot;) visits$datestamp = ymd(visits$datestamp) Wrtie a function in R that takes two arguments: a time series (\\(y\\)) formatted as a vector and an integer (\\(k\\)) specifying a lag. The output for this function is the lag \\(k\\) autocorrelation for \\(y\\), using the formula in Autocorrelation. Compare the output of your function to the output from (acf(y)). An extra challenge is to allow \\(k\\) to be a vector of lags, in which case your function should return a vector of autocorrelation values. The partial autocorrelation function, \\(\\phi_k\\), measures the correlation between a time series \\(y_t\\) and a lagged copy \\(y_{t-k}\\), with the linear dependence of \\(\\{ y_{t-1}, y_{t-2}, \\ldots,y_{t-k-1} \\}\\) removed. When \\(k=1\\), \\(\\hat{\\phi}_k = \\hat{\\rho}_k\\). When \\(k&gt;1\\), \\[\\begin{align} \\hat{\\phi}_k = \\text{cor}(y_1 - \\hat{y_1}|\\{ y_2, \\ldots, y_{k-1} \\} , y_k - \\hat{y_k}|\\{ y_2, \\ldots, y_{k-1} \\} ), \\end{align}\\] where \\(\\hat{y_1}|\\{ y_2, \\ldots, y_{k-1} \\}\\) is the predicted \\(y_1\\) using the linear regression where \\(\\{ y_2, \\ldots, y_{k-1} \\}\\) are explanatory variables. Compute the lag 1 and 2 partial autocorrelations for the following simulated time series. Show your code and validate your answers using the pacf function. The window function may be useful to extract subsets of the time series vector. set.seed(1) ysim = arima.sim(n=1000, list(ar=c(.5))) (pacf(ysim)) "],["smoothing-decomposition-noise.html", "Set 3 Smoothing, Decomposition, Noise 3.1 Exponential Smoothing 3.2 Decomposition 3.3 Statistical Models 3.4 Stationarity 3.5 Lab 2", " Set 3 Smoothing, Decomposition, Noise 3.1 Exponential Smoothing An alternate way to smooth a time series, generally appropriate for a time series with no clear seasonality, is with exponential smoothing. Like the moving average, this method averages over recent observations but differs in that it assigns relatively more weight to observations that are relatively closer. This idea can be expressed as, \\[\\begin{align} \\hat{y}_{t+1 | t} = \\alpha y_t + (1-\\alpha) \\hat{y}_{t | t-1}, \\end{align}\\] where \\(\\hat{y}_{t+1 | t}\\) can be interpreted as the smoothed value of \\(y_{t+1}\\) given data up to time \\(t\\). So, for the first few smoothed values, we have: \\[\\begin{align} \\hat{y}_{1|0} &amp;= l_0 \\\\ \\hat{y}_{2|1} &amp;= \\alpha y_1 + (1-\\alpha) l_0 \\\\ \\hat{y}_{3|2} &amp;= \\alpha y_2 + (1-\\alpha) \\hat{y}_{2|1} \\\\ &amp;= \\alpha y_2 + (1-\\alpha) \\alpha y_1 + (1-\\alpha)^2 l_0 \\end{align}\\] Since we don’t have data prior to \\(y_1\\), we denote \\(\\hat{y}_{1 | 0} = l_0\\). Therefore, this model depends on two parameters, \\((l_0, \\alpha)\\). If we continue with the sequence above, each predicted value \\(\\hat{y_t}\\) can be expressed, \\[\\begin{align} \\hat{y}_{t+1 | t} = (1-\\alpha) ^ t l_0 + \\sum_{j=0}^{t-1} \\alpha (1-\\alpha) ^ j y_{t-j}. \\\\ \\end{align}\\] Let’s take a look at how this method depends on the parameters. In the plot above, of Albanian exports between 1991 and 2017, we display two smoothed time series (one for \\(\\alpha = 0.5\\) and one where \\(\\alpha = 0.9\\)). For any \\(\\alpha\\) between 0 and 1, the weights attached to the observations decrease exponentially as we go back in time, hence the name “exponential smoothing”. If \\(\\alpha\\) is small (i.e., close to 0), more weight is given to observations from the more distant past. If \\(\\alpha\\) is large (i.e., close to 1), more weight is given to the more recent observations. 3.1.1 Optimization The \\((\\alpha, l_0)\\) parameters can be estimated by minimizing the SSE: \\[\\begin{align} \\text{SSE} = \\sum_{i=i}^T \\bigg(y_t - \\hat{y}_{t | t-1} \\bigg)^2. \\end{align}\\] This is a non-linear optimization problem that you will solve in Lab 2! 3.2 Decomposition Time series data can exhibit a variety of patterns, and it is often helpful to split a time series into several components, each representing an underlying pattern category. In this section, we will aim to decompose a time series into three parts: a trend component (\\(T\\)), a seasonality component (\\(S\\)), and a random component (\\(R\\)). That is, for each observation \\(Y_t\\), we want to break it down into three parts: \\(Y_T = T_t + S_t + R_t\\). To illustrate, we will use a dataset on monthly retail employment in the US. Let’s first take a look at this data. # us_employment data frame from the &#39;fpp3&#39; package us_employment$date = mdy ( str_c( month(us_employment$Month), &quot;-1-&quot;, year(us_employment$Month)) ) retail = us_employment %&gt;% filter(Title == &quot;Retail Trade&quot;, year(date) &gt; 2002) To decompose this time series, we will follow this basic algorithm: First we will use a moving average of order \\(m=12\\) to get the trend, \\(T\\). Then, we will estimate the seasonal effects, \\(S\\),by fitting a linear regression model to the de-trendended series (\\(y-T\\)) in which the month is the explanatory variable. The remainder is the random component, \\(y-T-S\\). The trend captures the majority of the change that is observed in this time series, while the relative scale of the monthly seasonality and the random variation is small. 3.3 Statistical Models Thus far, we have explored time series data to better understand their properties. These exploration methods can also be used to generate forecasts for future values. However, they are not able to quantify the uncertainty inherent in those forecasts, nor do they model the dependency structure inherent in the time series data. We will begin with a very simple model that does both of these things. 3.3.1 Random Walk Let us consider a simple model to describe time series data, \\(y_t = y_{t-1}+e_t\\), where \\(e_t \\sim N(0, \\sigma^2)\\) and all elements of the error vector are mutually independent. Let’s derive some important properties of this model: What is the mean, \\(E(y_t)\\)? What is the variance, \\(Var(y_t)\\)? What is the covariance between successive observations, \\(\\text{cov}(y_t, y_{t-1})\\)? What is the correlation between successive observations, \\(\\text{cor}(y_t, y_{t-1})\\)? Which properties depend on time? 3.3.2 White noise Now let us define a new time series, \\(z_t = y_t - y_{t-1}\\). Define the same properties as 1-5 above. These two simple models are important in finance. If a time series follows a random walk, then its first difference is white noise. Let’s see if this is the case with GOOG. goog = getSymbols(&#39;GOOG&#39;, from=&#39;2020-12-22&#39;, to=&#39;2023-12-22&#39;,auto.assign = FALSE) googdf = data.frame(ymd(index(goog)), goog$GOOG.Close) names(googdf) = c(&quot;date&quot;, &quot;price&quot;) ggplot(googdf, aes(x = date, y = price)) + geom_line() + theme_minimal() + ggtitle(&quot;GOOG Closing Price&quot;) It seems plausible that this is a white noise series. How can we build further evidence of this. One way would be to examine the autocorrelation function. What are we looking for? This is helpful but visual evidence alone is fairly weak. We could alternatively use a hypothesis test (Box-Pierce test) in which: \\[\\begin{align} H_0 &amp;: \\rho_1 = \\rho_2 = \\ldots = \\rho_k = 0 \\\\ H_A &amp;: \\text{at least one autocorrelation is different from 0} \\end{align}\\] The test statistic (the Ljung-Box Q-Statistic) for this test: \\[\\begin{align} Q = n(n+2) \\sum_{i=1}^k \\frac{\\hat{\\rho}_i^2}{(n-k)} \\end{align}\\] follows a chi-squared distribution with \\(k\\) degrees of freedom under the null hypothesis. 3.4 Stationarity Stationarity is a convenient assumption that allows us to describe the statistical properties of a time series. A time series is said to be stationary if there is: No systematic change in the mean or the variance No systematic trend No periodic variations or seasonality 3.5 Lab 2 Change the es function we developed in Exponential Smoothing to return the SSE, rather than yt, the smoothed time series. Now, use the optim function to find the values of \\((\\alpha, l_0)\\) that minimize SSE. Plot the exponentially smoothed time series using the optimized values for \\((\\alpha, l_0)\\). Choose a different type of employee from the us_employment dataset and, first, plot the time series. Now, decompose the time series into trend, seasonal, and random components. Follow the algorithm in Decomposition. Plot these and comment on your observations. Simulate a Random Walk with 100 time points (\\(y_t\\), \\(T= 1,\\ldots,100\\)). Repeat this process 50 times. Choose your own \\(\\sigma^2\\) and use the same value for each of the 50 iterations. Plot all 50 time series on the same plot. On the title, report the \\(\\sigma^2\\) value you used. Second, make a histogram of each of the end points (i.e., the 100th observation of each of the 50 time series). How does this histogram correspond with the theoretical properties of \\(Y_{100}\\) (i.e., the mean, variance, and shape of the distribution)? Write a function that takes a time series vector as input and returns the Ljung-Box Q-Statistic for \\(k=2\\), along with the p-value for the hypothesis test in White Noise. Using the quantmod package, choose your favorite stock and see if the differenced version of its closing prices over the past year can be described as white noise. Include plots and the result of the Box test. "],["arima-models.html", "Set 4 ARIMA Models 4.1 AR Models 4.2 MA Models 4.3 ARMA Models 4.4 ARIMA Models 4.5 Lab 3", " Set 4 ARIMA Models 4.1 AR Models An autoregressive model of order p, or AR(p), is defined as \\[ x_t = \\phi_0 + \\phi_1 x_{t-1} + \\phi_2 x_{t-2} + \\dots + \\phi_p x_{t-p} + w_t \\] where we assume \\(w_t\\) is white noise. That is, \\(w_t \\sim N(0,\\sigma^2_w)\\). \\(\\phi_p \\neq 0\\) for an order-p process 4.1.1 AR(1) Model Let’s start by figuring out some properties of the simplest AR model, the AR(1) model: \\[ x_t = \\phi_0 + \\phi_1 x_{t-1} + w_t \\] We start by assuming that \\(x_t\\) is a stationary time series. Under this assumption, we can show: \\[\\begin{align} E(x_t) &amp;= \\frac{\\phi_0}{1-\\phi_1} \\\\ Var(x_t) &amp;= \\frac{\\sigma^2_w}{1-\\phi_1^2} \\\\ \\rho(h) &amp;= \\phi_1^h \\end{align}\\] For this to work, \\(|\\phi_1| &lt; 1\\). Now let’s simulate some data from an AR1 model and compare theoretical and observed quantities. set.seed(1) phi_1 = 0.5 sigsq_w = 1 x = arima.sim(n = 10000, model = list(ar=c(phi_1)), sd = sigsq_w) quantity theory empirical mean 0.000000 -0.0142169 variance 1.333333 1.3889404 ACF, k=2 0.250000 0.2611053 4.1.2 AR Stationarity In the case of the AR(1) model, it was apparent that the condition we needed to ensure a stationary model was the condition that \\(|\\phi_1| &lt; 1\\). For the general AR(p) model, though, the condition is more complicated. Before defining the condition, we define the backshift operator, \\(\\mathbf{B}\\): \\[\\mathbf{B}x_t = x_{t-1}\\]. Using this operator, we can re-write the AR(p) model as, \\[ x_t = \\phi_1 x_{t-1} + \\phi_2 x_{t-2} + \\dots + \\phi_p x_{t-p} + w_t \\\\ \\Downarrow \\\\ \\begin{align} x_t - \\phi_1 x_{t-1} - \\phi_2 x_{t-2} - \\dots - \\phi_p x_{t-p} &amp;= w_t \\\\ (1 - \\phi_1 \\mathbf{B} - \\phi_2 \\mathbf{B}^2 - \\dots - \\phi_p \\mathbf{B}^p) x_t &amp;= w_t \\\\ \\phi_p (\\mathbf{B}^p) x_t &amp;= w_t \\\\ \\end{align} \\] We will refer to \\(\\phi_p (\\mathbf{B}^p)\\) as the characteristic equation. To be stationary, all roots of the characteristic equation must exceed 1 in absolute value. To make this more concrete, let’s go through some examples. \\(x_t = 0.5 x_{t-1} + w_t\\) \\(x_t = -0.2 x_{t-1} + 0.4 x_{t-2} + w_t\\) \\(x_t = x_{t-1} + w_t\\) 4.2 MA Models A moving average model of order q, or MA(q), is defined as \\[ x_t = \\theta_0 + w_t + \\theta_1 w_{t-1} + \\theta_2 w_{t-2} + \\dots + \\theta_q w_{t-q} \\] where \\(w_t\\) is white noise Each of the \\(x_t\\) is a sum of the most recent error terms Thus, all MA processes are stationary because they are finite sums of stationary WN processes. 4.2.1 MA(1) Model Let’s start by figuring out some properties of the simplest MA model, the MA(1) model: \\[ x_t = \\theta_0 + \\theta_1 w_{t-1} + w_t \\] We start by assuming that \\(x_t\\) is a stationary time series. Under this assumption, we can show: \\[\\begin{align} E(x_t) &amp;= \\theta_0 \\\\ Var(x_t) &amp;= \\sigma^2_w(1+\\theta_1^2) \\\\ \\rho(h) &amp;= \\frac{\\theta_1}{1+\\theta_1^2} \\text{ for } h=1 \\text{ and 0 otherwise. } \\end{align}\\] Now let’s simulate some data from an AR1 model and compare theoretical and observed quantities. set.seed(1) theta_1 = 0.5 sigsq_w = 1 z = arima.sim(n = 10000, model = list(ma=c(theta_1)), sd = sigsq_w) quantity theory empirical mean 0.00 -0.0098233 variance 1.25 1.2937915 ACF, k=2 0.40 0.4124200 4.3 ARMA Models An autoregressive moving average, or ARMA(p,q), model is written as \\[ x_t = \\phi_1 x_{t-1} + \\dots + \\phi_p x_{t-p} + w_t + \\theta_1 w_{t-1} + \\dots + \\theta_q w_{t-q} \\] 4.3.1 ACF for ARMA(p,q) models 4.3.2 PACF for ARMA(p,q) models 4.4 ARIMA Models Our data is not always stationary. If the data do not appear stationary, differencing can help. This leads to the class of autoregressive integrated moving average (ARIMA) models. ARIMA models are indexed with orders (p,d,q) where d indicates the order of differencing. \\(\\{x_t\\}\\) follows an ARIMA(p,d,q) process if \\((1-\\mathbf{B})^d x_t\\) is an ARMA(p,q) process. For example, if we look at Japan exports over the time period from 1960 to 2016, we see a clear evolution in the mean of the time series, indicating that the time series is not stationary. je = global_economy %&gt;% filter(Country == &quot;Japan&quot;, Year&lt; 2017) %&gt;% mutate(d = c(NA, diff(Exports))) As we saw in week one, if we instead look at the year over year changes in exports, we see something that more closely resembles a stationary time series. 4.4.1 Model Selection/ Fitting The general sequence of steps involved in fitting an ARIMA model to a given time series are: Evaluate whether the time series is stationary If not, make it stationary - select the differencing level (d) Select the AR level (p) and the MA level (q) that optimize the AIC Steps two and three are automated with the function forecast::auto.arima function. For instance, m0 = auto.arima(je$Exports) summary(m0) ## Series: je$Exports ## ARIMA(0,1,0) ## ## sigma^2 = 1.628: log likelihood = -93.1 ## AIC=188.21 AICc=188.28 BIC=190.24 ## ## Training set error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 0.0948585 1.264655 0.883942 0.2186117 7.269751 0.9826653 ## ACF1 ## Training set -0.04317139 4.4.2 Model Checking 4.4.2.1 Check the residuals Residuals = difference between the expected (fitted) value of \\(x_t\\) and the data There is no observation error in an ARMA model. The expected value is the \\(x_t\\) expected from data up to \\(t-1\\). For example, the residual for an AR(2) model is \\(y_t - \\hat{x}_t\\). \\(x_t = \\phi_1 x_{t-1} + \\phi_2 x_{t-2} + w_t\\) \\(\\hat{x}_t = \\phi_1 x_{t-1} + \\phi_2 x_{t-2}\\) 4.4.2.2 residuals() function in R The residuals() function will return the residuals for fitted models. ## Time Series: ## Start = 1 ## End = 57 ## Frequency = 1 ## [1] 0.01072294 -1.44501952 0.15303390 -0.39309669 0.45625211 1.02356255 ## [7] 0.06053730 -0.92437932 0.45807416 0.44426518 -0.19594755 0.86880508 ## [13] -1.08192227 -0.52480724 3.41625812 -0.76990990 0.72818035 -0.44252813 ## [19] -1.89419993 0.42955074 2.03742971 0.99396401 -0.20034080 -0.62338421 ## [25] 1.09590411 -0.50007152 -2.98081554 -0.97493052 -0.36290393 0.53728879 ## [31] 0.10797014 -0.43368768 -0.09399316 -0.61422391 -0.07420507 -0.03185334 ## [37] 0.50727239 1.06978245 -0.02437143 -0.57272023 0.67272500 -0.39538586 ## [43] 0.78912188 0.62107244 1.33273884 1.04040881 1.86046117 1.62041428 ## [49] -0.06927885 -4.90312357 2.51584283 -0.11176077 -0.38024365 1.37064557 ## [55] 1.62490343 0.04862657 -1.46977556 To check the fit of our model, we want to check that the residuals are white noise. 4.4.3 Forecasting The basic idea of forecasting with an ARIMA model is to estimate the parameters and forecast forward. For example, let’s say we want to forecast with a ARIMA(2,1,0) model with drift: \\[z_t = \\mu + \\beta_1 z_{t-1} + \\beta_2 z_{t-2} + e_t\\] where \\(z_t = x_t - x_{t-1}\\), the first difference. Arima() would write this model: \\[(z_t-m) = \\beta_1 (z_{t-1}-m) + \\beta_2 (z_{t-2}-m) + e_t\\] The relationship between \\(\\mu\\) and \\(m\\) is \\(\\mu = m(1 - \\beta_1 - \\beta_2)\\). Let’s estimate the \\(\\beta\\)’s for this model from Japan export. ## ar1 ar2 drift ## -0.05580519 -0.18850080 0.10736838 ## drift ## 0.1335991 So we can forecast with this model: \\[z_t = 0.1335991 -0.05580519 z_{t-1} - 0.18850080 z_{t-2} + e_t\\] Or use the forecast function. fr = forecast(fit, h = 5) plot(fr) 4.5 Lab 3 ACF and PACF for MA/ AR/ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
